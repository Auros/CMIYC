//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Runtime/Input/CacheInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace CMIYC.Input
{
    public partial class @CacheInput: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @CacheInput()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""CacheInput"",
    ""maps"": [
        {
            ""name"": ""Test"",
            ""id"": ""fdf27b75-7161-40a2-9659-b9b06df7c356"",
            ""actions"": [
                {
                    ""name"": ""Test"",
                    ""type"": ""Button"",
                    ""id"": ""2714eec1-fdb7-4a06-a20d-09b3766e4490"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""30c98161-4970-4c30-82aa-b1a5549470bd"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Test"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // Test
            m_Test = asset.FindActionMap("Test", throwIfNotFound: true);
            m_Test_Test = m_Test.FindAction("Test", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Test
        private readonly InputActionMap m_Test;
        private List<ITestActions> m_TestActionsCallbackInterfaces = new List<ITestActions>();
        private readonly InputAction m_Test_Test;
        public struct TestActions
        {
            private @CacheInput m_Wrapper;
            public TestActions(@CacheInput wrapper) { m_Wrapper = wrapper; }
            public InputAction @Test => m_Wrapper.m_Test_Test;
            public InputActionMap Get() { return m_Wrapper.m_Test; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(TestActions set) { return set.Get(); }
            public void AddCallbacks(ITestActions instance)
            {
                if (instance == null || m_Wrapper.m_TestActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_TestActionsCallbackInterfaces.Add(instance);
                @Test.started += instance.OnTest;
                @Test.performed += instance.OnTest;
                @Test.canceled += instance.OnTest;
            }

            private void UnregisterCallbacks(ITestActions instance)
            {
                @Test.started -= instance.OnTest;
                @Test.performed -= instance.OnTest;
                @Test.canceled -= instance.OnTest;
            }

            public void RemoveCallbacks(ITestActions instance)
            {
                if (m_Wrapper.m_TestActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(ITestActions instance)
            {
                foreach (var item in m_Wrapper.m_TestActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_TestActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public TestActions @Test => new TestActions(this);
        public interface ITestActions
        {
            void OnTest(InputAction.CallbackContext context);
        }
    }
}
